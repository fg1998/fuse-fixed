if( /LIBSPECTRUM_DEFINE_TYPES/ ) {

  $_ = << "CODE";
#include <stdint.h>

typedef  uint8_t libspectrum_byte;
typedef   int8_t libspectrum_signed_byte;
typedef uint16_t libspectrum_word;
typedef  int16_t libspectrum_signed_word;
typedef uint32_t libspectrum_dword;
typedef  int32_t libspectrum_signed_dword;
typedef uint64_t libspectrum_qword;
typedef  int64_t libspectrum_signed_qword;
CODE
}

if( /LIBSPECTRUM_GLIB_REPLACEMENT/ ) {

  $_ = "#define LIBSPECTRUM_HAS_GLIB_REPLACEMENT 0\n"
}

if( /LIBSPECTRUM_INCLUDE_GCRYPT/ ) {

  $_ = '';

}

if( /LIBSPECTRUM_SIGNATURE_PARAMETERS/ ) {

  $_ = "/* Signature parameters not stored as libgcrypt is not present */
";

}

if( /LIBSPECTRUM_CAPABILITIES/ ) {

  $_ = << "CODE";

/* we support snapshots etc. requiring zlib (e.g. compressed szx) */
#define	LIBSPECTRUM_SUPPORTS_ZLIB_COMPRESSION	(1)

/* zlib (de)compression routines */

WIN32_DLL libspectrum_error
libspectrum_zlib_inflate( const libspectrum_byte *gzptr, size_t gzlength,
			  libspectrum_byte **outptr, size_t *outlength );

WIN32_DLL libspectrum_error
libspectrum_zlib_compress( const libspectrum_byte *data, size_t length,
			   libspectrum_byte **gzptr, size_t *gzlength );


/* we support files compressed with bz2 */
#define	LIBSPECTRUM_SUPPORTS_BZ2_COMPRESSION	(1)


/* we support wav files */
#define	LIBSPECTRUM_SUPPORTS_AUDIOFILE	(1)

CODE
}

BEGIN {

  $srcdir = shift;

};

if( /LIBSPECTRUM_AUTOGEN_WARNING/ ) {
  $_ = << "CODE";
/* NB: This file is autogenerated from libspectrum.h.in. Do not edit
   unless you know what you're doing */
CODE
}

if( /LIBSPECTRUM_SNAP_ACCESSORS/ ) {

  open( DATAFILE, '<' . "${srcdir}/snap_accessors.txt" ) or die "Couldn't open `snap_accessors.txt': $!";

  $_ = '';
  while( <DATAFILE> ) {

    # Blank lines
    next if /^\s*$/;

    # Perl comments
    next if /^\s*#/;

    # Leading C comments
    next if /^\s*\/\*/;

    # Trailing C comments
    s/\/\*(.*)\*\///;

    my( $type, $name, $indexed ) = split;

    my $return_type;
    if( $type =~ /^(.*)\*/ ) {
	$return_type = "WIN32_DLL $1 *";
    } else {
	$return_type = "WIN32_DLL $type";
    }

    if( $indexed ) {

	print << "CODE";
$return_type libspectrum_snap_$name( libspectrum_snap *snap, int idx );
WIN32_DLL void libspectrum_snap_set_$name( libspectrum_snap *snap, int idx, $type $name );
CODE

    } else {

	print << "CODE";
$return_type libspectrum_snap_$name( libspectrum_snap *snap );
WIN32_DLL void libspectrum_snap_set_$name( libspectrum_snap *snap, $type $name );
CODE

    }
  }
}

if( /LIBSPECTRUM_TAPE_ACCESSORS/ ) {

    open( DATAFILE, '<' . "${srcdir}/tape_accessors.txt" )
	or die "Couldn't open `tape_accessors.txt': $!";

    $_ = '';
    while( <DATAFILE> ) {

	# Remove comments and blank lines
	s/#.*//;
	next if /^\s*$/;

	# Skip which block types each accessor applies to
	next if /^\s/;
	
	my( $type, $name, $indexed, undef ) = split;
	
	my $return_type;
	if( $type =~ /^(.*)\*/ ) {
	    $return_type = "WIN32_DLL $1 *";
	} else {
	    $return_type = "WIN32_DLL $type";
	}

	if( $indexed ) {

	  print << "CODE";
$return_type libspectrum_tape_block_$name( libspectrum_tape_block *block, size_t idx );
WIN32_DLL libspectrum_error libspectrum_tape_block_set_$name( libspectrum_tape_block *block, $type \*$name );
CODE

	} else {

	print << "CODE";
$return_type libspectrum_tape_block_$name( libspectrum_tape_block *block );
WIN32_DLL libspectrum_error libspectrum_tape_block_set_$name( libspectrum_tape_block *block, $type $name );
CODE
    
	}
    }

    close DATAFILE or die "Couldn't close `tape_accessors.txt': $!";
}
